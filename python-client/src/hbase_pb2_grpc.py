# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import hbase_pb2 as hbase__pb2


class HBaseServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get = channel.unary_stream(
        '/hbase.HBaseService/get',
        request_serializer=hbase__pb2.Get.SerializeToString,
        response_deserializer=hbase__pb2.Cell.FromString,
        )
    self.scan = channel.unary_stream(
        '/hbase.HBaseService/scan',
        request_serializer=hbase__pb2.Scan.SerializeToString,
        response_deserializer=hbase__pb2.Cell.FromString,
        )


class HBaseServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def scan(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HBaseServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get': grpc.unary_stream_rpc_method_handler(
          servicer.get,
          request_deserializer=hbase__pb2.Get.FromString,
          response_serializer=hbase__pb2.Cell.SerializeToString,
      ),
      'scan': grpc.unary_stream_rpc_method_handler(
          servicer.scan,
          request_deserializer=hbase__pb2.Scan.FromString,
          response_serializer=hbase__pb2.Cell.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hbase.HBaseService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
